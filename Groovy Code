pipeline {
    agent any
    
    tools {
        maven 'maven3'
    }
    
    environment {
        SCANNER_HOME= tool 'sonar-scanner'
        IMAGE_TAG = ""
    }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', credentialsId: 'git-token', url: 'https://github.com/sameerbehera10/Task-Master-Pro.git'
            }
        }

        
        stage('CODE COMPILE') {
            steps {
                sh 'mvn compile'
            }
        }
        
        stage('Run Test') {
            steps {
                sh 'mvn test'
            }
        }
        
        stage('Trivy FS Scan') {
            steps {
                sh "trivy fs --format table -o fs-report.html ."
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                script{
                    IMAGE_TAG = "${env.BUILD_NUMBER}"
                    withSonarQubeEnv('sonar') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=TaskMaster \
                        -Dsonar.projectName=TaskMaster -Dsonar.java.binaries=target '''
                    }
                }
            }
        }
        
        stage('Build App') {
            steps {
                sh "mvn package"
            }
        }
        
        stage('Publish to Nexus') {
            steps {
                withMaven(globalMavenSettingsConfig: 'settings', maven: 'maven3', mavenSettingsConfig: '', traceability: true) {
                    sh 'mvn deploy'
                }
            }
        }
        
        stage('Build Image') {
            steps {
                withDockerRegistry(credentialsId: 'docker-cred', url: 'https://index.docker.io/v1/') {
                    sh "docker build -t sameerbehera/taskmaster:${IMAGE_TAG} ."
                }
            }
        }
        
        stage('Scan Docker Image') {
            steps {
                sh "trivy image --format table -o image-report.html sameerbehera/taskmaster:${IMAGE_TAG}"
            }
        }
        
        stage('Push Docker Image') {
            steps {
                withDockerRegistry(credentialsId: 'docker-cred', url: 'https://index.docker.io/v1/') {
                    sh "docker push sameerbehera/taskmaster:${IMAGE_TAG}"
                }    
            }
        }
        
        stage('Deploy to Kubernetes') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: ' devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://002B4A7D0E82B55114ADC5DEFE13AB93.gr7.ap-south-1.eks.amazonaws.com') {
                    sh "kubectl apply -f deployment-service.yml -n webapps"
                    sleep 30
                }
            }
        }
        
        stage('Verify the Deployment') {
            steps {
                withKubeConfig(caCertificate: '', clusterName: ' devopsshack-cluster', contextName: '', credentialsId: 'k8-token', namespace: 'webapps', restrictKubeConfigAccess: false, serverUrl: 'https://002B4A7D0E82B55114ADC5DEFE13AB93.gr7.ap-south-1.eks.amazonaws.com') {
                    sh "kubectl get pods -n webapps"
                    sh "kubectl get svc -n webapps"

                }
            }
        }
        
    }
}
